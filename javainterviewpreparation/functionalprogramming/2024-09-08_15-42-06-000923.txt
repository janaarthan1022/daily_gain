File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/functionalprogramming/ConsumerExample2.java
package javaInterviewPreparation2024.functionalprogramming;

import java.util.List;
import java.util.function.Consumer;

public class ConsumerExample2 {

	public static void main(String[] args) {
		List<Instructor> instructors = Instructors.getAll();
		//Looping through all instructors and listing the values
		Consumer<Instructor> cons1 = i -> System.out.println(i);
		instructors.forEach(cons1);
		System.out.println("=======================");
		//Looping through all the instructors and print only their names
		Consumer<Instructor> cons2 = j -> {
			System.out.println(j.getName());
		};
		instructors.forEach(cons2);
		System.out.println("===============");
		//Looping through all the instructors and print out their names and courses.
		Consumer<Instructor> cons3 = k -> {
			System.out.println(k.getCourses());
		};
		instructors.forEach(cons2.andThen(cons3));

	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/functionalprogramming/Instructors.java
package javaInterviewPreparation2024.functionalprogramming;

import java.util.Arrays;
import java.util.List;

public class Instructors {

	public static List<Instructor> getAll() {
		Instructor ins1 = new Instructor("Mike", 2, "Software Developer", "M", false, Arrays.asList("Java", "C++"));
		Instructor ins2 = new Instructor("Jenny", 5, "Senior Software Developer", "F", true,
				Arrays.asList("Python", "C"));
		Instructor ins3 = new Instructor("James", 10, "Manager", "M", true,
				Arrays.asList("React js", "Node js"));
		Instructor ins4 = new Instructor("Anthony", 15, "Senior Manager", "M", false,
				Arrays.asList("Git", "Kubernetes"));
		Instructor ins5 = new Instructor("Sayed", 15, "Principal Engineer", "M", false,
				Arrays.asList("Docker", "AWS"));
		List<Instructor> list = Arrays.asList(ins1, ins2, ins3, ins4, ins5);
		return list;
	}
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/functionalprogramming/Instructor.java
package javaInterviewPreparation2024.functionalprogramming;

import java.util.List;

public class Instructor {

	private String name;
	private int yearsOfExp;
	private String title;
	private String gender;
	private boolean onlineCourses;
	private List<String> courses;

	public Instructor(String name, int yearsOfExp, String title, String gender, boolean onlineCourses,
			List<String> courses) {
		super();
		this.name = name;
		this.yearsOfExp = yearsOfExp;
		this.title = title;
		this.gender = gender;
		this.onlineCourses = onlineCourses;
		this.courses = courses;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getYearsOfExp() {
		return yearsOfExp;
	}

	public void setYearsOfExp(int yearsOfExp) {
		this.yearsOfExp = yearsOfExp;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public boolean isOnlineCourses() {
		return onlineCourses;
	}

	public void setOnlineCourses(boolean onlineCourses) {
		this.onlineCourses = onlineCourses;
	}

	public List<String> getCourses() {
		return courses;
	}

	public void setCourses(List<String> courses) {
		this.courses = courses;
	}

	@Override
	public String toString() {
		return "Instructor [name=" + name + ", yearsOfExp=" + yearsOfExp + ", title=" + title + ", gender=" + gender
				+ ", onlineCourses=" + onlineCourses + ", courses=" + courses + "]";
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/functionalprogramming/ConsumerExample.java
package javaInterviewPreparation2024.functionalprogramming;

import java.util.function.Consumer;

public class ConsumerExample {

	public static void main(String[] args) {
		Consumer<String> c = x -> System.out.println(x.length() + " the value of x is : " + x);
		c.accept("consumerexample");
		
		//Consumer with block statement
		Consumer<Integer> d = x -> {
			System.out.println("x X x = " + x*x);
			System.out.println("x + x = " + (x+x));
		};
		d.accept(20);
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambdacalculator/ArithmeticCalculator.java
package javaInterviewPreparation2024.lambdacalculator;

import java.util.Scanner;

public class ArithmeticCalculator {

	
	public static void main(String[] args) {
		System.out.println("Enter two numbers...");
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();
		int b = sc.nextInt();
		System.out.println("Select your operation...");
		System.out.println("add/sub/prod/div/mod");
		String operation = sc.next();
		
		ArithmeticCalculatorInterface arithmeticCalculatorInterface = null;
		if(operation.equalsIgnoreCase("add")) {
			arithmeticCalculatorInterface = (e,f) -> e+f;
		} else if(operation.equalsIgnoreCase("sub")) {
			arithmeticCalculatorInterface = (e,f) -> e-f;
		} else if(operation.equalsIgnoreCase("prod")) {
			arithmeticCalculatorInterface = (e,f) -> e*f;
		} else if(operation.equalsIgnoreCase("div")) {
			arithmeticCalculatorInterface = (e,f) -> e/f;
		} else if (operation.equalsIgnoreCase("mod")) {
			arithmeticCalculatorInterface = (e,f) -> e%f;
		}
		System.out.println("Operation output = " + arithmeticCalculatorInterface.operation(a, b));
		sc.close();

	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambdacalculator/ArithmeticCalculatorInterface.java
package javaInterviewPreparation2024.lambdacalculator;

@FunctionalInterface
public interface ArithmeticCalculatorInterface {

	public int operation(int a, int b);
	
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambdacallable/CallableExample.java
package javaInterviewPreparation2024.lambdacallable;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.IntStream;

public class CallableExample {

	public static int[] array = IntStream.rangeClosed(0, 5000).toArray();
	public static int total = IntStream.rangeClosed(0, 5000).sum();

	public static void main(String[] args) throws Exception {
		Callable<Integer> callable1 = () -> {
			int sum = 0;
			for (int i = 0; i < array.length / 2; i++) {
				sum += array[i];
			}
			return sum;
		};
		Callable<Integer> callable2 = () -> {
			int sum = 0;
			for (int i = array.length / 2; i < array.length; i++) {
				sum += array[i];
			}
			return sum;
		};
		ExecutorService ex = Executors.newFixedThreadPool(2);
		List<Callable<Integer>> taskList = Arrays.asList(callable1, callable2);
		List<Future<Integer>> results = ex.invokeAll(taskList);
		int k = 0; 
		int sum = 0;
		for(Future<Integer> result : results) {
			sum  += result.get();
			System.out.println("Sum of callable " + ++k + " is : " + result.get());
		}
		System.out.println("Sum from the callable = " + sum);
		System.out.println("Sum from the Intstream = " + total);
		ex.shutdown();
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambdathread/LambdaThreadExample.java
package javaInterviewPreparation2024.lambdathread;

public class LambdaThreadExample {

	public static void main(String[] args) {

		for (int i = 0; i < 5; i++) {
			new Thread(() -> {
				for (int j = 0; j < 10; j++) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					System.out.println(Thread.currentThread().getName() + " " + j);
				}
			}).start();
		}
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambda/HelloworlInterface.java
package javaInterviewPreparation2024.lambda;

public interface HelloworlInterface {

	public String sayHelloworld();
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambda/HelloworlTraditional.java
package javaInterviewPreparation2024.lambda;

public class HelloworlTraditional implements HelloworlInterface{

	public static void main(String[] args) {
		HelloworlInterface helloworldinterface = new HelloworlTraditional();
		String output = helloworldinterface.sayHelloworld();
		System.out.println(output);
	}

	@Override
	public String sayHelloworld() {
		return "Hello world interface traditional";

	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/eclipse_workspace/javaInterviewPreparation2024/src/javaInterviewPreparation2024/lambda/HelloworldLambda.java
package javaInterviewPreparation2024.lambda;

public class HelloworldLambda {

	private static HelloworlInterface helloworldinterface = () -> "Hello world lambda";

	public static void main(String[] args) {

		String output = helloworldinterface.sayHelloworld();
		System.out.println(output);

	}

}

=========================================================
