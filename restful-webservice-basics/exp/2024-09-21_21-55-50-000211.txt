File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.shift2024</groupId>
	<artifactId>restful-web-services-brokers</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>restful-web-services-brokers</name>
	<description>Demo project for Spring Boot</description>
	<url />
	<licenses>
		<license />
	</licenses>
	<developers>
		<developer />
	</developers>
	<scm>
		<connection />
		<developerConnection />
		<tag />
		<url />
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.6.0</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/test/java/com/shift2024/restful_web_services/RestfulWebServicesApplicationTests.java
package com.shift2024.restful_web_services;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class RestfulWebServicesApplicationTests {

	@Test
	void contextLoads() {
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/resources/messages_fr.properties
good.morning.message=Good morning message in french !!!
=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/resources/messages_nl.properties
good.morning.message=Good morning message in dutch !!!
=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/resources/application.properties
spring.application.name=restful-web-services
server.port=1122
=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/resources/messages.properties
good.morning.message=Good Morning !!!
=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/BrokerResource.java
package com.shift2024.restful_web_services;

import java.net.URI;
import java.util.List;
import java.util.Locale;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import jakarta.validation.Valid;

@RestController
public class BrokerResource {
	
	@Autowired
	private BrokerDaoService service;
	@Autowired
	private MessageSource messageSource;
	
	@GetMapping("/brokers")
	public List<BrokerDetail> listAllBrokes() {
		return service.listAllBrokers();
	}
	
	@GetMapping("/brokers/{id}")
	public BrokerDetail getBroker(@PathVariable String id) {
		return service.findOne(id);
	}
	
	@DeleteMapping("/brokers/{id}")
	public void deleteBroker(@PathVariable String id) {
		service.deleteOne(id);
	}
	
	@PostMapping("/brokers")
	public ResponseEntity<BrokerDetail> addBroker(@Valid  @RequestBody BrokerDetail brokerDetail) {
		BrokerDetail savedBrokerDetail = service.saveBroker(brokerDetail);
		URI location = ServletUriComponentsBuilder
				.fromCurrentRequest()
				.path("/{id}")
				.buildAndExpand(savedBrokerDetail.getId()).toUri();
		return ResponseEntity.created(location).build();
		
	}
	
	@GetMapping("/i18n")
	public String internationalization() {
		Locale locale = LocaleContextHolder.getLocale();
		return messageSource.getMessage("good.morning.message", null, "Default Message", locale);
	}
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/BrokerNotFoundException.java
package com.shift2024.restful_web_services;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(code = HttpStatus.NOT_FOUND, value = HttpStatus.NOT_FOUND)
public class BrokerNotFoundException extends RuntimeException {

	public BrokerNotFoundException(String message) {
		super(message);
	}
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/RestfulWebServicesApplication.java
package com.shift2024.restful_web_services;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RestfulWebServicesApplication {

	public static void main(String[] args) {
		SpringApplication.run(RestfulWebServicesApplication.class, args);
	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/BrokerDetail.java
package com.shift2024.restful_web_services;

import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class BrokerDetail {

	private int sno;
	private String id;
	@Size(min = 5, message = "Url should be minimun of 5 characters")
	private String url;
	@Size(min = 2, message = "Environment name should be minimum of 2 characters")
	private String env;
	@Size(max = 50, message = "Description is too long. Description length should not exceed 50 characters")
	private String description;
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/exception/CustResponseEntityExceptionHandler.java
package com.shift2024.restful_web_services.exception;

import java.time.LocalDateTime;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.shift2024.restful_web_services.BrokerNotFoundException;

@ControllerAdvice
public class CustResponseEntityExceptionHandler extends ResponseEntityExceptionHandler{

	@ExceptionHandler(Exception.class)
	public final ResponseEntity<ErrorDetails> handleExceptionGeneral(Exception ex, WebRequest request) throws Exception {
		ErrorDetails errorDetails = new ErrorDetails(LocalDateTime.now(), ex.getMessage(), request.getDescription(false));
		return new ResponseEntity<ErrorDetails>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@ExceptionHandler(BrokerNotFoundException.class)
	public final ResponseEntity<ErrorDetails> handleExceptionGeneral(BrokerNotFoundException ex, WebRequest request) throws Exception {
		ErrorDetails errorDetails = new ErrorDetails(LocalDateTime.now(), ex.getMessage(), request.getDescription(false));
		return new ResponseEntity<ErrorDetails>(errorDetails, HttpStatus.NOT_FOUND);
	}
	
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(
			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
		ErrorDetails errorDetails = new ErrorDetails(LocalDateTime.now(), ex.getMessage(), request.getDescription(false));
		return new ResponseEntity(errorDetails, HttpStatus.BAD_REQUEST);

	}

}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/exception/ErrorDetails.java
package com.shift2024.restful_web_services.exception;

import java.time.LocalDateTime;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public class ErrorDetails {

	private LocalDateTime timestamp;
	private String message;
	private String details;
}

=========================================================
File Name :::::::::::/Users/janaarthanm/Documents/nomad_path/upskill/shift2024/restful-web-services-brokers/src/main/java/com/shift2024/restful_web_services/BrokerDaoService.java
package com.shift2024.restful_web_services;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Component;

@Component
public class BrokerDaoService {

	public static List<BrokerDetail> brokerDetails = new ArrayList<>();
	private static int count = 0;
	
	static {
		brokerDetails.add(new BrokerDetail(++count, "eusbmtls", "mtlsaws.sb.aws.com:9092", "sb", "EU Sandbox mtls broker url"));
		brokerDetails.add(new BrokerDetail(++count, "eudevmtls", "mtlsaws.dev.aws.com:9092", "dev", "EU Dev mtls broker url"));
		brokerDetails.add(new BrokerDetail(++count, "euprodmtls", "mtlsaws.prod.aws.com:9092", "prod", "EU Prod mtls broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cnsbmtls", "mtlsaws.sb.aws.com.cn:9092", "sb", "CN Sandbox mtls broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cndevmtls", "mtlsaws.dev.aws.com.cn:9092", "dev", "CN Dev mtls broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cnprodmtls", "mtlsaws.prod.aws.com.cn:9092", "prod", "CN Prod mtls broker url"));	
		brokerDetails.add(new BrokerDetail(++count, "cnpremtls", "mtlsaws.preprod.aws.com.cn:9092", "preprod", "CN Preprod mtls broker url"));
		
		brokerDetails.add(new BrokerDetail(++count, "eusboauth", "oauth.sb.aws.com:9092", "sb", "EU Sandbox oauth broker url"));
		brokerDetails.add(new BrokerDetail(++count, "eudevoauth", "oauth.dev.aws.com:9092", "dev", "EU Dev oauth broker url"));
		brokerDetails.add(new BrokerDetail(++count, "euprodoauth", "oauth.prod.aws.com:9092", "prod", "EU Prod oauth broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cnsboauth", "oauth.sb.aws.com.cn:9092", "sb", "CN Sandbox oauth broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cndevoauth", "oauth.dev.aws.com.cn:9092", "dev", "CN Dev oauth broker url"));
		brokerDetails.add(new BrokerDetail(++count, "cnprodoauth", "oauth.prod.aws.com.cn:9092", "prod", "CN Prod oauth broker url"));	
		brokerDetails.add(new BrokerDetail(++count, "cnpreoauth", "oauth.preprod.aws.com.cn:9092", "preprod", "CN Preprod oauth broker url"));
		
	}
	
	public List<BrokerDetail> listAllBrokers() {
		return brokerDetails;
	}
	
	public BrokerDetail findOne(String id) {
		BrokerDetail requestDetail = new BrokerDetail();
		for(BrokerDetail brokerDetail : brokerDetails) {
			if(brokerDetail.getId().equalsIgnoreCase(id)) {
				requestDetail = brokerDetail;
				break;
			} else {
				throw new BrokerNotFoundException("Broker with id " + id + " is not found.");
			}
		}
		return requestDetail;
	}
	
	public void deleteOne(String id) {
		for(BrokerDetail brokerDetail : brokerDetails) {
			if(brokerDetail.getId().equalsIgnoreCase(id)) {
				brokerDetails.remove(brokerDetail);
				break;
			} else {
				throw new BrokerNotFoundException("Broker with id " + id + " is not found.");
			}
		}
	}
	
	
	public BrokerDetail saveBroker(BrokerDetail brokerDetail) {
		brokerDetail.setSno(++count);
		brokerDetails.add(brokerDetail);
		return brokerDetail;
	}
	
}

=========================================================
